name: NAPI Build 

on:
  workflow_call:
    inputs:
      host:
        required: true
        type: string
      target:
        required: true
        type: string
      docker:
        required: false
        type: string
      binding_dir:
        required: true
        type: string
      binding_name:
        required: true
        type: string
      npm_package_name:
        required: true
        type: string

jobs:
  build:
    name: ${{ inputs.host }} - ${{ inputs.target }} - node@20
    runs-on: ${{ inputs.host }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.0
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: pnpm
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies
        
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ inputs.target }}-cargo-${{ inputs.host }}
          
      - name: Install rust toolchain
        if: ${{ !inputs.docker }}
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ inputs.target }}
          override: true
          
      - name: Enable long paths on Windows
        if: contains(inputs.host, 'windows')
        shell: bash
        run: |
          git config --system core.longpaths true
        
      - name: Build binding in docker
        uses: addnab/docker-run-action@v3
        if: ${{ inputs.docker }}
        with:
          image: ${{ inputs.docker }}
          options: |
            -e DEBUG=napi:build
            --user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db 
            -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache 
            -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index 
            -v ${{ github.workspace }}:/build 
            -w /build
            --privileged
          run: |
            set -e 
            
            echo "=== Installing LLVM Dependencies ==="
            if [[ "${{ inputs.docker }}" == *"alpine"* ]]; then
              echo "Installing for Alpine..."
              apk add --no-cache llvm15-dev llvm15-static clang15-dev clang15-static libffi-dev
              
              # 设置 Alpine 的 LLVM 环境变量
              export LLVM_CONFIG_PATH=/usr/bin/llvm15-config
              export LIBCLANG_PATH=/usr/lib/libclang.so.15
              export CLANG_PATH=/usr/bin/clang-15
              
              # 验证安装
              echo "LLVM Config: $(which llvm15-config)"
              echo "LLVM Version: $(llvm15-config --version)"
              echo "Clang Version: $(clang-15 --version)"
              
            elif [[ "${{ inputs.docker }}" == *"debian"* ]]; then
              echo "Installing for Debian..."
              apt-get update && apt-get install -y llvm-dev libclang-dev clang
              
              # 设置 Debian 的 LLVM 环境变量
              export LLVM_CONFIG_PATH=$(which llvm-config)
              export LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu/libclang-1.so
              
              # 验证安装
              echo "LLVM Config: $(which llvm-config)"
              echo "LLVM Version: $(llvm-config --version)"
              echo "Clang Version: $(clang --version)"
            fi
            
            # 显示设置的环境变量
            echo "=== Environment Variables ==="
            echo "LLVM_CONFIG_PATH: $LLVM_CONFIG_PATH"
            echo "LIBCLANG_PATH: $LIBCLANG_PATH"
            echo "CLANG_PATH: $CLANG_PATH"
            
            echo "=== Build Process ==="
            rustup target add ${{ inputs.target }}
            cd ${{ inputs.binding_dir }}
            
            # 确保环境变量传递给构建过程
            export LLVM_CONFIG_PATH="$LLVM_CONFIG_PATH"
            export LIBCLANG_PATH="$LIBCLANG_PATH"
            export CLANG_PATH="$CLANG_PATH"
            
            DEBUG=napi:* npm run build:release -- --target ${{ inputs.target }}
            
            echo "=== Post-build Checks ==="
            echo "Source file exists:"
            ls -la /build/target/x86_64-unknown-linux-musl/release/libbinding.so || echo "Source file missing!"
            
            echo "Target directory status:"
            ls -la /build/crates/binding/
            
            echo "=== Manual Copy Attempt ==="
            if [ -f "/build/target/x86_64-unknown-linux-musl/release/libbinding.so" ]; then
              cp -v "/build/target/x86_64-unknown-linux-musl/release/libbinding.so" "/build/crates/binding/spack.linux-x64-musl.node" || {
                echo "Copy failed with: $?"
                echo "File details:"
                file "/build/target/x86_64-unknown-linux-musl/release/libbinding.so"
                stat "/build/target/x86_64-unknown-linux-musl/release/libbinding.so"
              }
            fi
            
            
      - name: Build binding
        if: ${{ !inputs.docker }}
        shell: bash
        run: |
          # npm run build -- --target ${{ inputs.target }}
          # pnpm --filter ${{ inputs.npm_package_name }} run build:release --target ${{ inputs.target }}
          pnpm --filter ${{ inputs.npm_package_name }} run build:release -- --target ${{ inputs.target }}

      - name: Show binary
        shell: bash
        run: |
          ls -l ${{ inputs.binding_dir }}

      # - name: Build npm
      #   shell: bash
      #   run: |
      #     pnpm --filter @shined/doctor build
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.binding_name }}-${{ inputs.target }}
          path: |
            ${{ inputs.binding_dir }}/${{ inputs.binding_name }}.*.node
            ${{ inputs.binding_dir }}/binding.js
            ${{ inputs.binding_dir }}/binding.d.ts
          if-no-files-found: error 

      # - name: Upload Js
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: js
      #     path: |
      #       ${{ inputs.binding_dir }}/binding.js
      #       ${{ inputs.binding_dir }}/binding.d.ts
      #     if-no-files-found: error 
      #     overwrite: true
